// <auto-generated />
using System;
using Cine__backend.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cine__backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210609030715_second")]
    partial class second
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cine__backend.Models.BookEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Expense")
                        .HasColumnType("float");

                    b.Property<double>("Income")
                        .HasColumnType("float");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BookEntries");
                });

            modelBuilder.Entity("Cine__backend.Models.ClubMember", b =>
                {
                    b.Property<Guid>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.ToTable("ClubMembers");
                });

            modelBuilder.Entity("Cine__backend.Models.ClubMemberGenre", b =>
                {
                    b.Property<Guid>("ClubMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClubMemberId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("ClubMemberGenres");
                });

            modelBuilder.Entity("Cine__backend.Models.Film", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("Cine__backend.Models.FilmFilmRol", b =>
                {
                    b.Property<Guid>("FilmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FilmRolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MemberRol")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FilmId", "FilmRolId", "MemberRol");

                    b.HasIndex("FilmRolId");

                    b.ToTable("FilmFilmRols");
                });

            modelBuilder.Entity("Cine__backend.Models.FilmGenre", b =>
                {
                    b.Property<Guid>("FilmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FilmId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("FilmGenres");
                });

            modelBuilder.Entity("Cine__backend.Models.FilmRol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FilmRols");

                    b.HasData(
                        new
                        {
                            Id = new Guid("87955c70-fe62-4b9e-ba32-fd4809f87532"),
                            Name = "Actor"
                        },
                        new
                        {
                            Id = new Guid("fc0fec66-b831-4aeb-b004-91f1b5a0835b"),
                            Name = "Director"
                        },
                        new
                        {
                            Id = new Guid("8e09e9b1-b6e5-4471-8551-12584cd064b1"),
                            Name = "Productor"
                        },
                        new
                        {
                            Id = new Guid("4a1a3e1b-e366-4c85-a282-be5225d1515a"),
                            Name = "Asistente de dirección"
                        },
                        new
                        {
                            Id = new Guid("4effbe87-57a0-4003-85b8-5aabcfec7a44"),
                            Name = "Productor Ejecutivo"
                        },
                        new
                        {
                            Id = new Guid("c74b3b15-8a96-4e6e-8567-6d28e0606e88"),
                            Name = "Guionista"
                        },
                        new
                        {
                            Id = new Guid("c3e5b33c-9bdf-4c3b-9fc9-2d4aea811577"),
                            Name = "Diseñador de Vestuario"
                        },
                        new
                        {
                            Id = new Guid("e55185a3-8526-4c70-a165-a968f61bcedf"),
                            Name = "Técnico de Sonido"
                        });
                });

            modelBuilder.Entity("Cine__backend.Models.FilmScreening", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("FilmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("RoomId");

                    b.ToTable("FilmScreenings");
                });

            modelBuilder.Entity("Cine__backend.Models.FilmScreeningPriceModification", b =>
                {
                    b.Property<Guid>("FilmScreeningId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PriceModificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Optional")
                        .HasColumnType("bit");

                    b.HasKey("FilmScreeningId", "PriceModificationId");

                    b.HasIndex("PriceModificationId");

                    b.ToTable("FilmScreeningPriceModifications");
                });

            modelBuilder.Entity("Cine__backend.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3c304dc-58e5-4d7e-bd5e-e24983121aac"),
                            Name = "Drama"
                        },
                        new
                        {
                            Id = new Guid("c90747f2-73fd-47bd-acfe-1696d8717ea4"),
                            Name = "Comedia"
                        },
                        new
                        {
                            Id = new Guid("60e9e2fd-9027-46f0-85d1-1d03e3a5f308"),
                            Name = "Romántica"
                        },
                        new
                        {
                            Id = new Guid("716175a2-b939-4922-a1c8-63bdf99fa1a1"),
                            Name = "Suspenso"
                        },
                        new
                        {
                            Id = new Guid("d1e87c30-1fbe-429d-848c-9ff12437f6e0"),
                            Name = "Terror"
                        },
                        new
                        {
                            Id = new Guid("98690325-81d6-4a60-9ace-40b9e2096011"),
                            Name = "Tragicomedia"
                        },
                        new
                        {
                            Id = new Guid("6952025e-f3a7-4e46-8f29-3e89105418d6"),
                            Name = "Hístorico"
                        },
                        new
                        {
                            Id = new Guid("bad90d05-9c22-4912-ae12-57cdf7ad2639"),
                            Name = "Documental"
                        },
                        new
                        {
                            Id = new Guid("74783895-168f-4480-a7fd-02242de45d2f"),
                            Name = "Ficción"
                        },
                        new
                        {
                            Id = new Guid("e074cebb-5f95-4b96-a283-76e19dd45fc4"),
                            Name = "Ciencia Ficción"
                        },
                        new
                        {
                            Id = new Guid("039e8849-a5a9-4e15-a1de-47e0fc9efd6e"),
                            Name = "Aventura"
                        },
                        new
                        {
                            Id = new Guid("2f436b72-24c8-45c5-8f04-e9df4df8634c"),
                            Name = "Musical"
                        },
                        new
                        {
                            Id = new Guid("94a0fba8-ba43-43e6-8421-154c0996ce85"),
                            Name = "Erótico"
                        });
                });

            modelBuilder.Entity("Cine__backend.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("Items");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Item");
                });

            modelBuilder.Entity("Cine__backend.Models.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("Cine__backend.Models.PriceModification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PriceModifications");
                });

            modelBuilder.Entity("Cine__backend.Models.PurchaseOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BoxOffice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CredictCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PurchaseTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("Cine__backend.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Cine__backend.Models.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("Cine__backend.Models.SeatSectionLevelRoom", b =>
                {
                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SeatId", "SectionId", "LevelId", "RoomId");

                    b.HasIndex("LevelId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SectionId");

                    b.ToTable("SeatSectionLevelRooms");
                });

            modelBuilder.Entity("Cine__backend.Models.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Cine__backend.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Cine__backend.Models.UserFilm", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FilmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("UserId", "FilmId");

                    b.HasIndex("FilmId");

                    b.ToTable("UserFilms");
                });

            modelBuilder.Entity("Cine__backend.Models.Reservation", b =>
                {
                    b.HasBaseType("Cine__backend.Models.Item");

                    b.Property<Guid>("FilmSreeningId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.HasIndex("FilmSreeningId");

                    b.HasIndex("SeatId");

                    b.HasDiscriminator().HasValue("Reservation");
                });

            modelBuilder.Entity("Cine__backend.Models.ClubMemberGenre", b =>
                {
                    b.HasOne("Cine__backend.Models.ClubMember", "ClubMember")
                        .WithMany()
                        .HasForeignKey("ClubMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cine__backend.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClubMember");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Cine__backend.Models.FilmFilmRol", b =>
                {
                    b.HasOne("Cine__backend.Models.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cine__backend.Models.FilmRol", "FilmRol")
                        .WithMany()
                        .HasForeignKey("FilmRolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("FilmRol");
                });

            modelBuilder.Entity("Cine__backend.Models.FilmGenre", b =>
                {
                    b.HasOne("Cine__backend.Models.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cine__backend.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Cine__backend.Models.FilmScreening", b =>
                {
                    b.HasOne("Cine__backend.Models.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cine__backend.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Cine__backend.Models.FilmScreeningPriceModification", b =>
                {
                    b.HasOne("Cine__backend.Models.FilmScreening", "FilmScreening")
                        .WithMany()
                        .HasForeignKey("FilmScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cine__backend.Models.PriceModification", "PriceModification")
                        .WithMany()
                        .HasForeignKey("PriceModificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilmScreening");

                    b.Navigation("PriceModification");
                });

            modelBuilder.Entity("Cine__backend.Models.Item", b =>
                {
                    b.HasOne("Cine__backend.Models.PurchaseOrder", null)
                        .WithMany("Items")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cine__backend.Models.PurchaseOrder", b =>
                {
                    b.HasOne("Cine__backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cine__backend.Models.SeatSectionLevelRoom", b =>
                {
                    b.HasOne("Cine__backend.Models.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cine__backend.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cine__backend.Models.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cine__backend.Models.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Room");

                    b.Navigation("Seat");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Cine__backend.Models.UserFilm", b =>
                {
                    b.HasOne("Cine__backend.Models.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cine__backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cine__backend.Models.Reservation", b =>
                {
                    b.HasOne("Cine__backend.Models.FilmScreening", "FilmScreening")
                        .WithMany()
                        .HasForeignKey("FilmSreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cine__backend.Models.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilmScreening");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("Cine__backend.Models.PurchaseOrder", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
